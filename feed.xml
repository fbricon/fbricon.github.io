<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://fbricon.github.io/</id><title>Fred's safe space</title><subtitle>A blog about Java, Eclipse plugins, Maven, VS Code extensions and Language Servers.</subtitle> <updated>2023-02-08T17:13:52+01:00</updated> <author> <name>Fred Bricon</name> <uri>https://fbricon.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://fbricon.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://fbricon.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Fred Bricon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Setting up a remote build cache server for Maven</title><link href="https://fbricon.github.io/posts/setup-remote-build-cache-server/" rel="alternate" type="text/html" title="Setting up a remote build cache server for Maven" /><published>2023-02-08T00:00:00+01:00</published> <updated>2023-02-08T00:00:00+01:00</updated> <id>https://fbricon.github.io/posts/setup-remote-build-cache-server/</id> <content src="https://fbricon.github.io/posts/setup-remote-build-cache-server/" /> <author> <name>Fred Bricon</name> </author> <category term="Eclipse" /> <summary> Starting with Maven 3.9.0, you can use the maven-build-cache-extension to store build caches both locally and remotely. However the documentation for setting up a remote cache server is fairly vague. But, after looking at the integration tests of maven-build-cache-extension, I figured out how to set up a Docker-run NginX cache server. Launching the remote cache server Long story short, you ne... </summary> </entry> <entry><title>Use GitHub Releases to host an Eclipse P2 Repository</title><link href="https://fbricon.github.io/posts/use-github-releases-as-p2-repo/" rel="alternate" type="text/html" title="Use GitHub Releases to host an Eclipse P2 Repository" /><published>2022-06-27T00:00:00+02:00</published> <updated>2022-09-14T09:59:59+02:00</updated> <id>https://fbricon.github.io/posts/use-github-releases-as-p2-repo/</id> <content src="https://fbricon.github.io/posts/use-github-releases-as-p2-repo/" /> <author> <name>Fred Bricon</name> </author> <category term="Eclipse" /> <summary> Hosting an Eclipse P2 repository is a great way to share your awesome Eclipse plugins with the rest of the world. However, finding a host can be a challenge. Who wants to pay for hosting nowadays? For some time, people (including me) have (ab)used Github pages as a hosting solution. Lorenzo Bettini has a pretty thorough blog post about this. Even though Git is not meant to host binaries, it’ll ... </summary> </entry> <entry><title>Automatically detect managed JDKs in Eclipse</title><link href="https://fbricon.github.io/posts/Eclipse-automatically-detect-managed-JREs/" rel="alternate" type="text/html" title="Automatically detect managed JDKs in Eclipse" /><published>2022-06-27T00:00:00+02:00</published> <updated>2022-06-27T00:00:00+02:00</updated> <id>https://fbricon.github.io/posts/Eclipse-automatically-detect-managed-JREs/</id> <content src="https://fbricon.github.io/posts/Eclipse-automatically-detect-managed-JREs/" /> <author> <name>Fred Bricon</name> </author> <category term="Eclipse" /> <summary> I’ve been using .sdkman to easily install JDKs for a while now, and one thing that bothers me about Eclipse is that it doesn’t automatically detect the JDKs that .sdkman manages. JRE Discovery So I wrote the JRE Discovery plugin for Eclipse. It’s a simple plugin that automatically detects the JREs that Java managers install, and configures them in Eclipse. It currently detects JREs managed by ... </summary> </entry> </feed>
