[ { "title": "Setting up a remote build cache server for Maven", "url": "/posts/setup-remote-build-cache-server/", "categories": "Eclipse", "tags": "Maven,, GitHub,, Docker", "date": "2023-02-08 00:00:00 +0100", "snippet": "Starting with Maven 3.9.0, you can use the maven-build-cache-extension to store build caches both locally and remotely. However the documentation for setting up a remote cache server is fairly vague.But, after looking at the integration tests of maven-build-cache-extension, I figured out how to set up a Docker-run NginX cache server.Launching the remote cache serverLong story short, you need to execute a Docker command that looks like:docker run -d \\ -e WEBDAV_USERNAME=admin \\ -e WEBDAV_PASSWORD=admin \\ -p 9080:80 \\ -v /path/to/cache/:/var/webdav/public \\ xama/nginx-webdavThis will start a WebDAV server on NGinX, running in a Docker container, accessible from http://localhost:9080. The username/password are admin/admin for authentication.It’s important that your local /path/to/cache/ directory, mounted as a volume in the Docker container, contains a subdirectory (let’s say maven) that will be used as the WebDAV collection holding your build caches.Configuring your buildThe same username and password should then be stored in your Maven’s settings.xml, like &lt;servers&gt; &lt;server&gt; &lt;id&gt;remote-cache&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt;Your .mvn/maven-build-cache-config.xml should then look like:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;cache xmlns=\"http://maven.apache.org/BUILD-CACHE-CONFIG/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/BUILD-CACHE-CONFIG/1.0.0 https://maven.apache.org/xsd/build-cache-config-1.0.0.xsd\"&gt; &lt;configuration&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;remote enabled=\"true\" id=\"remote-cache\" saveToRemote=\"true\"&gt; &lt;url&gt;http://localhost:9080/maven&lt;/url&gt; &lt;/remote&gt; &lt;/configuration&gt;&lt;/cache&gt;where http://localhost:9080/maven points at the maven collection living under your /path/to/cache/ directory.Running Maven buildsYour 1st Maven build will show there’s no cache found on the remote server, but the build artifacts will be stored remotely at the end of the build.➜ mvnd-cache-test git:(main) ✗ ./mvnw clean verify[INFO] Loading cache configuration from /Users/fbricon/Dev/souk/mvnd-cache-test/.mvn/maven-build-cache-config.xml[INFO] Using XX hash algorithm for cache[INFO] Scanning for projects...[INFO][INFO] -----------------------&lt; foo.bar:mvn-cache-test &gt;-----------------------[INFO] Building mvn-cache-test 0.0.1-SNAPSHOT[INFO] from pom.xml[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- clean:3.2.0:clean (default-clean) @ mvn-cache-test ---[INFO] Deleting /Users/fbricon/Dev/souk/mvnd-cache-test/target[INFO] Going to calculate checksum for project [groupId=foo.bar, artifactId=mvn-cache-test][INFO] Scanning plugins configurations to find input files. Probing is enabled, values will be checked for presence in file system[INFO] Found 2 input files. Project dir processing: 5, plugins: 2 millis[INFO] Project inputs calculated in 19 ms. XX checksum [996f4a3b35403f08] calculated in 13 ms.[INFO] Attempting to restore project foo.bar:mvn-cache-test from build cache[INFO] Downloading http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/996f4a3b35403f08/buildinfo.xml[INFO] Cannot download http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/996f4a3b35403f08/buildinfo.xmlorg.apache.http.client.HttpResponseException: status code: 404, reason phrase: Not Found (404) at org.eclipse.aether.transport.http.HttpTransporter.handleStatus (HttpTransporter.java:544) at org.eclipse.aether.transport.http.HttpTransporter.execute (HttpTransporter.java:368) at org.eclipse.aether.transport.http.HttpTransporter.implGet (HttpTransporter.java:298) at org.eclipse.aether.spi.connector.transport.AbstractTransporter.get (AbstractTransporter.java:72) at org.apache.maven.buildcache.RemoteCacheRepositoryImpl.getResourceContent (RemoteCacheRepositoryImpl.java:165) at org.apache.maven.buildcache.RemoteCacheRepositoryImpl.findBuild (RemoteCacheRepositoryImpl.java:114) at org.apache.maven.buildcache.LocalCacheRepositoryImpl.findBuild (LocalCacheRepositoryImpl.java:183) at org.apache.maven.buildcache.CacheControllerImpl.findCachedBuild (CacheControllerImpl.java:212) at org.apache.maven.buildcache.CacheControllerImpl.findCachedBuild (CacheControllerImpl.java:179) at org.apache.maven.buildcache.BuildCacheMojosExecutionStrategy.execute (BuildCacheMojosExecutionStrategy.java:114) at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:160) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:105) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:73) at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:53) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:118) at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:260) at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:172) at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:100) at org.apache.maven.cli.MavenCli.execute (MavenCli.java:821) at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:270) at org.apache.maven.cli.MavenCli.main (MavenCli.java:192) at jdk.internal.reflect.DirectMethodHandleAccessor.invoke (DirectMethodHandleAccessor.java:104) at java.lang.reflect.Method.invoke (Method.java:578) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282) at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406) at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) at jdk.internal.reflect.DirectMethodHandleAccessor.invoke (DirectMethodHandleAccessor.java:104) at java.lang.reflect.Method.invoke (Method.java:578) at org.apache.maven.wrapper.BootstrapMainStarter.start (BootstrapMainStarter.java:47) at org.apache.maven.wrapper.WrapperExecutor.execute (WrapperExecutor.java:156) at org.apache.maven.wrapper.MavenWrapperMain.main (MavenWrapperMain.java:72)[INFO] Remote cache is incomplete or missing, trying local build for foo.bar:mvn-cache-test[INFO] Local build was not found by checksum 996f4a3b35403f08 for foo.bar:mvn-cache-test[INFO][INFO] --- resources:3.3.0:resources (default-resources) @ mvn-cache-test ---[INFO] skip non existing resourceDirectory /Users/fbricon/Dev/souk/mvnd-cache-test/src/main/resources[INFO][INFO] --- compiler:3.10.1:compile (default-compile) @ mvn-cache-test ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to /Users/fbricon/Dev/souk/mvnd-cache-test/target/classes[INFO][INFO] --- resources:3.3.0:testResources (default-testResources) @ mvn-cache-test ---[INFO] skip non existing resourceDirectory /Users/fbricon/Dev/souk/mvnd-cache-test/src/test/resources[INFO][INFO] --- compiler:3.10.1:testCompile (default-testCompile) @ mvn-cache-test ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to /Users/fbricon/Dev/souk/mvnd-cache-test/target/test-classes[INFO][INFO] --- surefire:3.0.0-M7:test (default-test) @ mvn-cache-test ---[INFO] Using auto detected provider org.apache.maven.surefire.junit4.JUnit4Provider[INFO][INFO] -------------------------------------------------------[INFO] T E S T S[INFO] -------------------------------------------------------[INFO] Running foo.bar.AppTest[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 s - in foo.bar.AppTest[INFO][INFO] Results:[INFO][INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO][INFO][INFO] --- jar:3.2.2:jar (default-jar) @ mvn-cache-test ---[INFO] Building jar: /Users/fbricon/Dev/souk/mvnd-cache-test/target/mvn-cache-test-0.0.1-SNAPSHOT.jar[INFO] Saved to remote cache http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/996f4a3b35403f08/buildinfo.xml[INFO] Saved to remote cache http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/996f4a3b35403f08/mvn-cache-test.jar[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 2.358 s[INFO] Finished at: 2023-02-08T15:49:28+01:00[INFO] ------------------------------------------------------------------------[INFO] Saving cache report on build completion[INFO] Saved to remote cache http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/ea8602ee-e325-459e-b114-b272eccc1d88/build-cache-report.xmlIf you replay the same command, you’ll see the local cache is now used, the remote cache is skipped, the last request failure dating from less than 1h:➜ mvnd-cache-test git:(main) ✗ ./mvnw clean verify[INFO] Loading cache configuration from /Users/fbricon/Dev/souk/mvnd-cache-test/.mvn/maven-build-cache-config.xml[INFO] Using XX hash algorithm for cache[INFO] Scanning for projects...[INFO][INFO] -----------------------&lt; foo.bar:mvn-cache-test &gt;-----------------------[INFO] Building mvn-cache-test 0.0.1-SNAPSHOT[INFO] from pom.xml[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- clean:3.2.0:clean (default-clean) @ mvn-cache-test ---[INFO] Deleting /Users/fbricon/Dev/souk/mvnd-cache-test/target[INFO] Going to calculate checksum for project [groupId=foo.bar, artifactId=mvn-cache-test][INFO] Scanning plugins configurations to find input files. Probing is enabled, values will be checked for presence in file system[INFO] Found 2 input files. Project dir processing: 4, plugins: 2 millis[INFO] Project inputs calculated in 17 ms. XX checksum [996f4a3b35403f08] calculated in 12 ms.[INFO] Attempting to restore project foo.bar:mvn-cache-test from build cache[INFO] Skipping remote lookup, last unsuccessful lookup less than 1h ago.[INFO] Remote cache is incomplete or missing, trying local build for foo.bar:mvn-cache-test[INFO] Local build found by checksum 996f4a3b35403f08[INFO] Found cached build, restoring foo.bar:mvn-cache-test from cache by checksum 996f4a3b35403f08[INFO] Skipping plugin execution (cached): resources:resources[INFO] Skipping plugin execution (cached): compiler:compile[INFO] Skipping plugin execution (cached): resources:testResources[INFO] Skipping plugin execution (cached): compiler:testCompile[INFO] Skipping plugin execution (cached): surefire:test[INFO] Skipping plugin execution (cached): jar:jar[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 0.383 s[INFO] Finished at: 2023-02-08T15:50:30+01:00[INFO] ------------------------------------------------------------------------[INFO] Saving cache report on build completion[INFO] Saved to remote cache http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/b0a16886-0913-4f12-aa08-0361240252a6/build-cache-report.xmlYou can delete the local cache to force Maven to connect to the cache server, and then relaunch a build. This time the remote cache will be hit and reused:➜ mvnd-cache-test git:(main) ✗ rm -rf ~/.m2/build-cache/v1/➜ mvnd-cache-test git:(main) ✗ ./mvnw clean verify[INFO] Loading cache configuration from /Users/fbricon/Dev/souk/mvnd-cache-test/.mvn/maven-build-cache-config.xml[INFO] Using XX hash algorithm for cache[INFO] Scanning for projects...[INFO][INFO] -----------------------&lt; foo.bar:mvn-cache-test &gt;-----------------------[INFO] Building mvn-cache-test 0.0.1-SNAPSHOT[INFO] from pom.xml[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- clean:3.2.0:clean (default-clean) @ mvn-cache-test ---[INFO] Deleting /Users/fbricon/Dev/souk/mvnd-cache-test/target[INFO] Going to calculate checksum for project [groupId=foo.bar, artifactId=mvn-cache-test][INFO] Scanning plugins configurations to find input files. Probing is enabled, values will be checked for presence in file system[INFO] Found 2 input files. Project dir processing: 4, plugins: 3 millis[INFO] Project inputs calculated in 18 ms. XX checksum [996f4a3b35403f08] calculated in 12 ms.[INFO] Attempting to restore project foo.bar:mvn-cache-test from build cache[INFO] Downloading http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/996f4a3b35403f08/buildinfo.xml[INFO] Build info downloaded from remote repo, saving to: /Users/fbricon/.m2/build-cache/v1/foo.bar/mvn-cache-test/996f4a3b35403f08/remote-cache/buildinfo.xml[INFO] Found cached build, restoring foo.bar:mvn-cache-test from cache by checksum 996f4a3b35403f08[INFO] Downloading http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/996f4a3b35403f08/mvn-cache-test.jar[INFO] Skipping plugin execution (cached): resources:resources[INFO] Skipping plugin execution (cached): compiler:compile[INFO] Skipping plugin execution (cached): resources:testResources[INFO] Skipping plugin execution (cached): compiler:testCompile[INFO] Skipping plugin execution (cached): surefire:test[INFO] Skipping plugin execution (cached): jar:jar[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 0.483 s[INFO] Finished at: 2023-02-08T15:53:58+01:00[INFO] ------------------------------------------------------------------------[INFO] Saving cache report on build completion[INFO] Saved to remote cache http://localhost:9080/maven/v1/foo.bar/mvn-cache-test/c53dbf84-8c16-44d2-8841-c229ed496e34/build-cache-report.xmlConclusionDocker makes everything simpler! Setting up a remote build cache server to be used by the maven-build-cache-extension is no different. However keep in mind remote cache servers are mostly relevant for CI environments, so those instructions simply have an educational purpose.You can check a self-contained demo project showcasing the usage of such remote cache server: https://github.com/fbricon/mvn-cache-test." }, { "title": "Use GitHub Releases to host an Eclipse P2 Repository", "url": "/posts/use-github-releases-as-p2-repo/", "categories": "Eclipse", "tags": "Eclipse,, P2,, JBang,, GitHub", "date": "2022-06-27 00:00:00 +0200", "snippet": "Hosting an Eclipse P2 repository is a great way to share your awesome Eclipse plugins with the rest of the world. However, finding a host can be a challenge. Who wants to pay for hosting nowadays? For some time, people (including me) have (ab)used Github pages as a hosting solution. Lorenzo Bettini has a pretty thorough blog post about this. Even though Git is not meant to host binaries, it’ll be good enough for most users.But what if we could use GitHub Releases as a hosting solution instead? GitHub Releases is a free service specifically tailored to host and serve binaries on GitHub. Why hasn’t anyone in the Eclipse community done this yet?The repository structure problemWell the problem is that GitHub Releases hosts all files under a flat directory structure. Eclipse p2 repositories however, are hierarchical by default, like this:p2 repo││ p2.index│ artifacts.jar│ artifacts.xml.xz│ contents.jar│ contents.xml.xz│└───features/│ │ feature1.jar│ │ ...│ └─ featureN.jar│└───plugins/ │ plugin1.jar │ ... └─ pluginN.jarThere’s no way (that I have found) to keep a hierarchical structure in GitHub Releases, so the only way to host a p2 repository there, would be to flatten said repository. After validating with teammate Roland Grunberg that flat p2 repos can actually work after some (manual) manipulations, all we had to do was to tweak our Maven build process to automate the flattening.JBang to the rescueUnfortunately, Eclipse Tycho (p2 actually), doesn’t seem to expose a way to configure the p2 repository structure. Fixing p2 and Tycho would be the obvious, long-term solution, but I’m both lazy and impatient, so went the scripting way to achieve our goal.The script needs to perform 2 things: move every file under plugins/ and features/ to the root of the p2 repository, replace all references to /plugins/ and /features/ with /, in the artifacts.xml file compressed in artifacts.jar and artifacts.xml.xz.There are probably a quasi-infinite number of ways to script this, but I chose the awesome JBang to do it. It’s just Java, and is super easy to integrate into a Maven build. In Eclipse, the JBang / Eclipse Integration plugin makes it super easy to edit JBang scripts.Let’s assume your p2 repository directory is my.p2.repo.dir. So here’s the script, that you can store as my.p2.repo.dir/jbang/repoflattener.java:///usr/bin/env jbang \"$0\" \"$@\" ; exit $?/** * Copyright 2022 Fred Bricon * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *///DEPS commons-io:commons-io:2.11.0//DEPS org.tukaani:xz:1.9//JAVA 11import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.URI;import java.nio.file.FileSystem;import java.nio.file.FileSystems;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.StandardCopyOption;import java.util.Collections;import java.util.Map;import java.util.jar.JarInputStream;import java.util.stream.Collectors;import org.apache.commons.io.FilenameUtils;import org.apache.commons.io.file.PathUtils;import org.tukaani.xz.LZMA2Options;import org.tukaani.xz.XZOutputStream;public class repoflattener { public static void main(String... args) throws IOException { Path baseDir = (args == null || args.length == 0) ? Path.of(\"\") : Path.of(args[0]); Path originalRepo = baseDir.resolve(\"target\").resolve(\"repository\"); System.out.println(\"🛠 flattening \" + originalRepo.toAbsolutePath()); Path flatRepo = originalRepo.resolveSibling(\"flat-repository\"); if (Files.exists(flatRepo)) { PathUtils.deleteDirectory(flatRepo); } Files.createDirectory(flatRepo); var files = Files.walk(originalRepo).filter(path -&gt; { if (!Files.isRegularFile(path)) { return false; } var fileName = FilenameUtils.getName(path.toString()); return !fileName.startsWith(\"artifacts\"); }).collect(Collectors.toList()); for (Path file : files) { PathUtils.copyFileToDirectory(file, flatRepo); } Path artifactsXml = extractAndRewriteArtifactXml(originalRepo.resolve(\"artifacts.jar\")); createXZ(artifactsXml, flatRepo); createJar(artifactsXml, flatRepo); System.out.println(\"🙌 repository was flattened to \" + flatRepo.toAbsolutePath()); } private static Path extractAndRewriteArtifactXml(Path archive) throws IOException { var extracted = Files.createTempFile(\"artifacts\", \".xml\"); try (JarInputStream archiveInputStream = new JarInputStream( new BufferedInputStream(Files.newInputStream(archive)))) { // we assume only 1 entry archiveInputStream.getNextJarEntry(); streamRewrite(archiveInputStream, extracted); } if (Files.size(extracted) == 0) { throw new IOException(\"💥 Failed to extract/rewrite artifacts.xml\"); } return extracted; } private static void streamRewrite(InputStream src, Path dst) throws IOException { try (BufferedReader br = new BufferedReader(new InputStreamReader(src)); BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(Files.newOutputStream(dst)))) { String line; while ((line = br.readLine()) != null) { line = line.replace(\"/plugins/\", \"/\").replace(\"/features/\", \"/\"); bw.write(line); bw.newLine(); } } } private static void createXZ(Path artifactsXml, Path flatRepo) throws IOException { Path artifactsXmlXZ = flatRepo.resolve(\"artifacts.xml.xz\"); try (BufferedInputStream in = new BufferedInputStream(Files.newInputStream(artifactsXml)); XZOutputStream xzOut = new XZOutputStream( new BufferedOutputStream(Files.newOutputStream(artifactsXmlXZ)), new LZMA2Options());) { byte[] buffer = new byte[4096]; int n = 0; while (-1 != (n = in.read(buffer))) { xzOut.write(buffer, 0, n); } } } private static void createJar(Path artifactXml, Path flatRepo) throws IOException { Path artifactsJar = flatRepo.resolve(\"artifacts.jar\").toAbsolutePath(); var env = Collections.singletonMap(\"create\", \"true\");// Create the zip file if it doesn't exist URI uri = URI.create(\"jar:file:\" + artifactsJar.toString().replace('\\\\', '/')); try (FileSystem zipfs = FileSystems.newFileSystem(uri, env)) { Path pathInZipfile = zipfs.getPath(\"artifacts.xml\"); Files.copy(artifactXml, pathInZipfile, StandardCopyOption.REPLACE_EXISTING); } }}So, assuming you’re building your Eclipse p2 repository with Eclipse Tycho, you can add a flat-repo Maven profile to your my.p2.repo.dir/pom.xml file, invoking the jbang-maven-plugin to execute jbang/repoflattener.java during the package phase, after Tycho generated the my.p2.repo.dir/target/repository directory: &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;flat-repo&lt;/id&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;dev.jbang&lt;/groupId&gt; &lt;artifactId&gt;jbang-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.0.7&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;run&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;run&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;script&gt;${project.basedir}/jbang/repoflattener.java&lt;/script&gt; &lt;args&gt; &lt;arg&gt;${project.basedir}&lt;/arg&gt; &lt;/args&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/profile&gt; &lt;/profiles&gt;The ${project.basedir} arg is the path to the root of your Eclipse p2 repository project, from which all computed paths will be relative to.This script being saved as a GitHub Gist, we can reference its URL directly in our build (yes JBang is that convenient), so that would give you:&lt;configuration&gt; &lt;script&gt;https://gist.github.com/fbricon/3c718d03f55c3ceba5dea570af4af5f8&lt;/script&gt; &lt;args&gt; &lt;arg&gt;${project.basedir}&lt;/arg&gt; &lt;/args&gt; &lt;trusts&gt; &lt;trust&gt;https://gist.github.com&lt;/trust&gt; &lt;/trusts&gt;&lt;/configuration&gt;Either way, when calling mvn verify -Pflat-repo, the repoflattener.java script will be executed, and you shoud find your flat p2 repo under the my.p2.repo.dir/target/flat-repository directory. eg:Releasing from a GitHub action:Now, all we have left to do, is to “release” the flat-repository contents to GitHub Releases, and we’re done. You could do this manually, or via any CI system, GitHub Actions is just a great way to do it.The following is a GitHub action (you can save as .github/worflows/CI.yaml) that will do this on each push to the main branch, using the latest tag as a rolling release, thanks to marvinpinto/action-automatic-releases:name: Build P2 Update Siteon: pull_request: push: branches: - main tags: - \"*.*.*\"jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Set up JDK 11 uses: actions/setup-java@v2 with: java-version: \"11\" distribution: \"temurin\" cache: \"maven\" - name: Build with Maven run: mvn --batch-mode --update-snapshots verify -Pflat-repo - name: Upload flat p2 update site if: github.ref == 'refs/heads/main' uses: marvinpinto/action-automatic-releases@latest with: repo_token: \"${{secrets.GITHUB_TOKEN}}\" automatic_release_tag: \"latest\" prerelease: true title: \"Development Build\" files: | my.p2.repo.dir/target/flat-repository/* - name: Release uses: softprops/action-gh-release@v1 if: startsWith(github.ref, 'refs/tags/') with: files: | my.p2.repo.dir/target/flat-repository/*Any push to the main branch will trigger a new release, overwriting the previous latest tag. The update site will be available as: https://github.com/your.org/your.repo/releases/download/latest/This is perfect for snapshot builds or continous deployment.Additionally, actual releases will be performed every time you create/push a tag following the *.*.* format, in which case the update site will be reachable from: https://github.com/your.org/your.repo/releases/download/&lt;tag&gt;/ConclusionGitHub Releases is actually a great way to release your Eclipse plugins as a p2 repository, all you have to do is ensure that repository is configured to serve files from a flat structure. JBang makes it super easy to script those changes.As a bonus you get download statistics for your plugins.You can check an existing project leveraging this approach: https://github.com/sidespin/jre-discovery.Hope you find it useful!" }, { "title": "Automatically detect managed JDKs in Eclipse", "url": "/posts/Eclipse-automatically-detect-managed-JREs/", "categories": "Eclipse", "tags": "Eclipse,, .sdkman,, JBang,, asdf,, Jabba", "date": "2022-06-27 00:00:00 +0200", "snippet": "I’ve been using .sdkman to easily install JDKs for a while now, and one thing that bothers me about Eclipse is that it doesn’t automatically detect the JDKs that .sdkman manages.JRE DiscoverySo I wrote the JRE Discovery plugin for Eclipse. It’s a simple plugin that automatically detects the JREs that Java managers install, and configures them in Eclipse. It currently detects JREs managed by : SDKMan, asdf-java, Jabba JBangManaged JREs will be automatically discovered on Eclipse startup, or, while running, when added by their respective Java managers.Automatic detection can be disabled from the JRE Discovery preference page:See it in actionHere is an example, when combined with the JBang / Eclipse Integration plugin, you can see the JRE Discovery plugin in action, after declaring the JAVA version to use in your JBang script:Pretty awesome or what?InstallationJRE Discovery is available in the Eclipse Marketplace. Drag the following button to your running Eclipse workspace. (⚠️ Requires the Eclipse Marketplace Client)Alternatively, in Eclipse: open Help &gt; Install New Software... work with: https://github.com/sidespin/jre-discovery/releases/download/latest/ expand the category and select the JRE Discovery Feature proceed with the installation restart Eclipse" } ]
